"""
Задание 4.1
Обработать строку NAT таким образом, чтобы в имени интерфейса вместо FastEthernet было GigabitEthernet.

Ограничение: Все задания надо выполнять используя только пройденные темы.

NAT = "ip nat inside source list ACL interface FastEthernet0/1 overload"
"""
nat = "ip nat inside source list ACL interface FastEthernet0/1 overload"
print(nat.replace('Fast', 'Gigabit'))
ip nat inside source list ACL interface GigabitEthernet0/1 overload


"""
Задание 4.2
Преобразовать строку MAC из формата XXXX:XXXX:XXXX в формат XXXX.XXXX.XXXX

Ограничение: Все задания надо выполнять используя только пройденные темы.

MAC = 'AAAA:BBBB:CCCC'
"""
mac = 'AAAA:BBBB:CCCC'
print(mac.replace(':', '.'))
AAAA.BBBB.CCCC


"""
Задание 4.3
Получить из строки CONFIG список VLANов вида: ['1', '3', '10', '20', '30', '100']

Ограничение: Все задания надо выполнять используя только пройденные темы.
"""
config = 'switchport trunk allowed vlan 1,3,10,20,30,100'
print(config.split()[-1].split(','))
['1', '3', '10', '20', '30', '100']


"""
Задание 4.4
Из строк command1 и command2 получить список VLANов, которые есть и в команде command1 и в команде command2.

Для данного примера, результатом должен быть список: [1, 3, 100] Этот список содержит подсказку по типу итоговых данных.

Ограничение: Все задания надо выполнять используя только пройденные темы.

command1 = 'switchport trunk allowed vlan 1,3,10,20,30,100'
command2 = 'switchport trunk allowed vlan 1,3,100,200,300'
"""
command1 = 'switchport trunk allowed vlan 1,3,10,20,30,100'
command2 = 'switchport trunk allowed vlan 1,3,100,200,300'
command1 = command1.split()[-1].split(',')
command2 = command2.split()[-1].split(',')
set1 = set(command1)
set2 = set(command2)
setall = set1.intersection(set2)
vlans = list(setall)
print(vlans)
['1', '3', '100']


"""
Задание 4.5
Список VLANS это список VLANов, собранных со всех устройств сети, поэтому в списке есть повторяющиеся номера VLAN.

Из списка нужно получить уникальный список VLANов, отсортированный по возрастанию номеров.

Ограничение: Все задания надо выполнять используя только пройденные темы.

VLANS = [10, 20, 30, 1, 2, 100, 10, 30, 3, 4, 10]
"""
VLANS = [10, 20, 30, 1, 2, 100, 10, 30, 3, 4, 10]
set1 = set(VLANS)
vlans = list(set1)
vlans = sorted(vlans)
print(vlans)
[1, 2, 3, 4, 10, 20, 30, 100]


"""
Задание 4.6
Обработать строку ospf_route и вывести информацию на стандартный поток вывода в виде:

Protocol:               OSPF
Prefix:                 10.0.24.0/24
AD/Metric:              110/41
Next-Hop:               10.0.13.3
Last update:            3d18h
Outbound Interface:     FastEthernet0/0
Ограничение: Все задания надо выполнять используя только пройденные темы.

ospf_route = 'O        10.0.24.0/24 [110/41] via 10.0.13.3, 3d18h, FastEthernet0/0'
"""
ospf_route = 'O        10.0.24.0/24 [110/41] via 10.0.13.3, 3d18h, FastEthernet0/0'
ospf = ospf_route.split()

protocol = ospf[0]
prefix = ospf[1]
ad = ospf[2]
hop = ospf[4]
update = ospf[5]
interface = ospf[6]

protocol = protocol.replace('O', 'OSPF')
ad = ad.strip('[]')
hop = hop.rstrip(',')
update = update.rstrip(',')

ospf_route = """
Protocol:             {0:18}
Prefix:               {1:18}
AD/Metric:            {2:18}
Next-Hop:             {3:18}
Last update:          {4:18}
Outbound Interface:   {5:18}
"""

print(ospf_route.format(protocol,prefix,ad,hop,update,interface))

Protocol:             OSPF              
Prefix:               10.0.24.0/24      
AD/Metric:            110/41            
Next-Hop:             10.0.13.3         
Last update:          3d18h             
Outbound Interface:   FastEthernet0/0   


"""
Задание 4.7
Преобразовать MAC-адрес в двоичную строку (без двоеточий).

Ограничение: Все задания надо выполнять используя только пройденные темы.

MAC = 'AAAA:BBBB:CCCC'
"""
MAC = 'AAAA:BBBB:CCCC'
mac = MAC.replace(':','')
mac = int(mac, 16)
print(bin(mac))
0b101010101010101010111011101110111100110011001100


"""
Задание 4.8
Преобразовать IP-адрес (переменная IP) в двоичный формат и вывести вывод столбцами на стандартный поток вывода, таким образом:

первой строкой должны идти десятичные значения байтов
второй строкой двоичные значения
Вывод должен быть упорядочен также, как в примере:

столбцами
ширина столбца 10 символов
Пример вывода:

10        1         1         1
00001010  00000001  00000001  00000001
Ограничение: Все задания надо выполнять используя только пройденные темы.

IP = '192.168.3.1'
"""
IP = '192.168.3.1'
ip = IP.split('.')
table = """
{0:<10} {1:<10} {2:<10} {3:<10}
{0:0<10b} {1:0<10b} {2:0<10b} {3:0<10b}
"""
print(table.format(192, 168, 3, 1))

192        168        3          1         
1100000000 1010100000 1100000000 1000000000

