#!/usr/bin/env python3
"""
Задание 5.1a
Всё, как в задании 5.1. Но, если пользователь ввел адрес хоста, а не адрес сети, то надо адрес хоста преобразовать в адрес сети и вывести адрес сети и маску, как в задании 5.1.

Пример адреса сети (все биты хостовой части равны нулю):

10.0.1.0/24
190.1.0.0/16
Пример адреса хоста:

10.0.1.1/24 - хост из сети 10.0.1.0/24
10.0.5.1/30 - хост из сети 10.0.5.0/30
Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях сеть/маска.

Ограничение: Все задания надо выполнять используя только пройденные темы.
"""

network = input('Введите адрес сети с префиксом (Например 10.1.1.0/24):')
ip = network[:network.find('/')]
ip = ip.split('.')
oktet1 = int(ip[0])
oktet2 = int(ip[1])
oktet3 = int(ip[2])
oktet4 = 0 * (int(ip[3]))

ip_template = """
Network:
{0:<10} {1:<10} {2:<10} {3:<10}
{0:<010b} {1:<010b} {2:<010b} {3:<010b}
"""
print(ip_template.format(oktet1, oktet2, oktet3, oktet4))

mask = network[network.find('/')::]
mask1 = mask.lstrip('/')
maskint = int(mask1)
maskbit = '1' * maskint
maskbit = "{:<032}".format(maskbit)
moktet1 = int(maskbit[0:8], 2)
moktet2 = int(maskbit[8:16], 2)
moktet3 = int(maskbit[16:24], 2)
moktet4 = int(maskbit[24:32], 2)

mask_template = """
Mask:
{4:<}
{0:<10} {1:<10} {2:<10} {3:<10}
{0:<10b} {1:<10b} {2:<10b} {3:<10b}
"""

print(mask_template.format(moktet1, moktet2, moktet3, moktet4, mask))

"""
./5.1a.py 
Введите адрес сети с префиксом (Например 10.1.1.0/24):192.168.1.254/24

Network:
192        168        1          0         
1100000000 1010100000 1000000000 0000000000


Mask:
/24
255        255        255        0         
11111111   11111111   11111111   0         

"""
